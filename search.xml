<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker+Uwsgi+Nginx部署Django项目</title>
    <url>/2020/04/01/Docker-Uwsgi-Nginx%E9%83%A8%E7%BD%B2Django%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="版本信息："><a href="#版本信息：" class="headerlink" title="版本信息："></a>版本信息：</h2><p>系统：Centos7<br>Python:3.6.2<br>Django：2.2.0</p><h2 id="Docker配置"><a href="#Docker配置" class="headerlink" title="Docker配置"></a>Docker配置</h2><p>docker安装方法请自行搜索并安装。</p><p>创建一个Centos容器，让它在后台运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name freestudy --network host centos:7 tail -f /dev/null</span><br></pre></td></tr></table></figure><a id="more"></a>



<p>-d：让它在后台运行<br>    –name freestudy：设置名字。<br>    –network host：让它加入宿主机网络，从而可以连上外网<br>    centos:latest：要运行的镜像及其版本<br>    tail -f /dev/null：让容器一直执行某条命令，以免没有任务而自动退出</p>
<p>进入容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it freestudy bash</span><br></pre></td></tr></table></figure>
<p>-it：打开该容器的输入（stdin）和终端（tty）。 bash：在容器中执行bash命令，启动一个shell，供用户操作。</p>
<p>退出容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ctrl+D</span><br></pre></td></tr></table></figure>

<h2 id="Python及插件库环境配置"><a href="#Python及插件库环境配置" class="headerlink" title="Python及插件库环境配置"></a>Python及插件库环境配置</h2><p>将Django项目从宿主机拷贝到容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp /root/django freestudy:/root/</span><br></pre></td></tr></table></figure>
<p>之后便可以在Centos容器里部署Django项目，不满意就销毁重建。</p>
<p>安装Python及pip<br>进入容器：<br>安装Python解释器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install epel-release		<span class="comment"># 添加epel软件库</span></span><br><span class="line">yum install python36			<span class="comment"># 安装指定版本的python</span></span><br></pre></td></tr></table></figure>
<p>这里默认安装的是3.6.8版本</p>
<p>我想要安装3.6.2，直接用之前传好的文件安装吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp /tmp/Python-3.6.2.tgz 04c193b9e394:/</span><br></pre></td></tr></table></figure>

<p>安装ifconfig</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y net-tools</span><br></pre></td></tr></table></figure>

<p>安装依赖包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel gcc gcc-c++  openssl-devel libffi-devel python-devel mariadb-devel</span><br></pre></td></tr></table></figure>

<p>解压安装Python：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xzvf Python-3.6.2.tgz -C  /tmp</span><br></pre></td></tr></table></figure>

<p>安装至/usr/local目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>  /tmp/Python-3.6.2/</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span></span><br><span class="line">yum -y install gcc automake autoconf libtool make</span><br><span class="line">make</span><br><span class="line">make altinstall</span><br></pre></td></tr></table></figure>

<p>更改/usr/bin/python链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/bin/python3.6 /usr/bin/python3</span><br></pre></td></tr></table></figure>

<p>安装pip：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install python36-pip</span><br></pre></td></tr></table></figure>

<p>cd到项目requirements.txt目录下：<br>安装依赖库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3.6 install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>报错:需要更新pip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install --upgrade pip</span><br></pre></td></tr></table></figure>

<p>速度慢，看下上面报错是超时退出了。<br>遇到pip3 install的速度巨慢时，可以更换源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd </span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkdir .pip</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cd .pip</span></span><br><span class="line">[root@localhost .pip]<span class="comment"># vim pip.conf</span></span><br></pre></td></tr></table></figure>
<p>写入如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url=http://pypi.douban.com/simple</span><br><span class="line">trusted-host = pypi.douban.com</span><br></pre></td></tr></table></figure>
<p>再次报错：<br>ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.</p>
<p>升级setuptools：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3.6 install --upgrade setuptools</span><br></pre></td></tr></table></figure>

<p>出现报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Collecting django-pure-pagination</span><br><span class="line">  Downloading http://pypi.doubanio.com/packages/55/43/50c475f408d3350cec340855970a5ce02ea12f5a53d520315f200b4847a1/django-pure-pagination-0.3.0.tar.gz (10 kB)</span><br><span class="line">    ERROR: Command errored out with <span class="built_in">exit</span> status 1:</span><br><span class="line">     <span class="built_in">command</span>: /usr/bin/python3 -c <span class="string">'import sys, setuptools, tokenize; sys.argv[0] = '</span><span class="string">"'"</span><span class="string">'/tmp/pip-install-belyzfl8/django-pure-pagination/setup.py'</span><span class="string">"'"</span><span class="string">'; __file__='</span><span class="string">"'"</span><span class="string">'/tmp/pip-install-belyzfl8/django-pure-pagination/setup.py'</span><span class="string">"'"</span><span class="string">';f=getattr(tokenize, '</span><span class="string">"'"</span><span class="string">'open'</span><span class="string">"'"</span><span class="string">', open)(__file__);code=f.read().replace('</span><span class="string">"'"</span><span class="string">'\r\n'</span><span class="string">"'"</span><span class="string">', '</span><span class="string">"'"</span><span class="string">'\n'</span><span class="string">"'"</span><span class="string">');f.close();exec(compile(code, __file__, '</span><span class="string">"'"</span><span class="string">'exec'</span><span class="string">"'"</span><span class="string">'))'</span> egg_info --egg-base /tmp/pip-install-belyzfl8/django-pure-pagination/pip-egg-info</span><br><span class="line">         cwd: /tmp/pip-install-belyzfl8/django-pure-pagination/</span><br><span class="line">    Complete output (7 lines):</span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">      File <span class="string">"&lt;string&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      File <span class="string">"/tmp/pip-install-belyzfl8/django-pure-pagination/setup.py"</span>, line 5, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">        README = readme.read()</span><br><span class="line">      File <span class="string">"/usr/local/lib/python3.6/encodings/ascii.py"</span>, line 26, <span class="keyword">in</span> decode</span><br><span class="line">        <span class="built_in">return</span> codecs.ascii_decode(input, self.errors)[0]</span><br><span class="line">    UnicodeDecodeError: <span class="string">'ascii'</span> codec can<span class="string">'t decode byte 0xc3 in position 672: ordinal not in range(128)</span></span><br><span class="line"><span class="string">    ----------------------------------------</span></span><br><span class="line"><span class="string">ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.</span></span><br></pre></td></tr></table></figure>
<p>解决：<br>命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LANG=en_US</span><br><span class="line"><span class="built_in">export</span> LC_ALL=en_US.UTF-8</span><br></pre></td></tr></table></figure>

<h2 id="安装Mariadb"><a href="#安装Mariadb" class="headerlink" title="安装Mariadb"></a>安装Mariadb</h2><p>安装Mariadb数据库容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mariadb</span><br><span class="line">docker run --name mariadb -p 3301:3306 -d -v /root/mdbdata:/var/lib/mysql  -e MYSQL_ROOT_PASSWORD=root1234 mariadb</span><br></pre></td></tr></table></figure>
<p>-d: 表示detach，后台运行并打印container ID；<br>-p: 端口，3301:3306表示将容器中的3306端口公开给host的3301端口；<br>-v: 表示volume，用来设置数据文件存放的位置，/root/mdbdata:/var/lib/mysql表示将host中当前用户文件夹”/root/mdbdata”挂载于容器中的/var/lib/mysql目录，这样即使容器被删除，数据文件还是可以保留；<br>-e: 表示environment，用来设置用户及密码等环境变量，MYSQL_ROOT_PASSWORD=admin表示将root的密码设置为root1234（只在第一次登陆数据库时使用）；<br>–name: 表示容器的名称，例如现在这个数据库容器的名称为mariadb<br>命令的最后是镜像的名称，mariadb</p>
<p>修改为自启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker container update --restart=always 容器id</span><br></pre></td></tr></table></figure>

<p>测试登陆：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -proot1234 -h127.0.0.1 -P 3301 -D mysql</span><br></pre></td></tr></table></figure>

<p>创建数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE freestudy DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br><span class="line">（要指定编码，不然后面migrate数据迁移会报错）</span><br></pre></td></tr></table></figure>

<p>查询容器数据库ip：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect --format <span class="string">'&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;'</span> 容器id</span><br><span class="line">172.17.0.3</span><br></pre></td></tr></table></figure>

<p>查看宿主机ip：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br><span class="line">172.17.0.1</span><br></pre></td></tr></table></figure>

<p>进入应用容器，同样适用ifconfig查看ip<br>172.17.0.1</p>
<p>进入应用容器，cd到settings.py,vim将mysql连接host修改：<br>172.17.0.3</p>
<h2 id="测试项目"><a href="#测试项目" class="headerlink" title="测试项目"></a>测试项目</h2><p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br></pre></td></tr></table></figure>
<p>将缺少的库一个个地pip3 install<br>遇到找不到的库就在名称前面加django-<br>如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django-formtools</span><br><span class="line">pip install django-import-export</span><br></pre></td></tr></table></figure>
<p>（两个容器连接成功）</p>
<p>测试运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 manage.py runserver 0.0.0.0:80</span><br></pre></td></tr></table></figure>

<p>打开一个新对话：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl 127.0.0.1:80</span><br></pre></td></tr></table></figure>
<p>成功访问。</p>
<h2 id="安装uWSGI服务器"><a href="#安装uWSGI服务器" class="headerlink" title="安装uWSGI服务器"></a>安装uWSGI服务器</h2><p>安装uWSGI：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure>

<p>进入django项目目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir conf</span><br><span class="line"><span class="built_in">cd</span> conf</span><br><span class="line">mkdir uwsgi</span><br><span class="line">vi uwsgi/uwsgi.ini</span><br></pre></td></tr></table></figure>
<p>输入配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysite_uwsgi.ini file</span></span><br><span class="line">[uwsgi]</span><br><span class="line"><span class="comment"># Django-related settings</span></span><br><span class="line"><span class="comment"># the base directory (full path)</span></span><br><span class="line"><span class="built_in">chdir</span>           = /root/django/FreeStudy</span><br><span class="line"><span class="comment"># Django's wsgi file</span></span><br><span class="line">module          = FreeStudy.wsgi</span><br><span class="line"><span class="comment"># the virtualenv (full path)</span></span><br><span class="line"><span class="comment"># process-related settings</span></span><br><span class="line"><span class="comment"># master</span></span><br><span class="line">master          = <span class="literal">true</span></span><br><span class="line"><span class="comment"># maximum number of worker processes</span></span><br><span class="line">processes       = 10</span><br><span class="line"><span class="comment"># the socket (use the full path to be safe</span></span><br><span class="line">socket          = 127.0.0.1:8000</span><br><span class="line"><span class="comment"># ... with appropriate permissions - may be needed</span></span><br><span class="line"><span class="comment"># chmod-socket    = 664</span></span><br><span class="line"><span class="comment"># clear environment on exit</span></span><br><span class="line">vacuum          = <span class="literal">true</span></span><br><span class="line">logto = /tmp/mylog.log</span><br></pre></td></tr></table></figure>
<p>注：<br>    chdir： 表示需要操作的目录，也就是项目的目录<br>    module： wsgi文件的路径<br>    processes： 进程数<br>    virtualenv：虚拟环境的目录</p>
<p>使用配置文件启动uWSGI服务器（默认在后台运行）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uwsgi --ini uwsgi/uwsgi.ini</span><br></pre></td></tr></table></figure>
<p>显示运行成功了。</p>
<p>测试运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uwsgi --http :8000 --module FreeStudy.wsgi</span><br></pre></td></tr></table></figure>
<p>打开新对话：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl 127.0.0.1:8000</span><br></pre></td></tr></table></figure>
<p>成功获取。</p>
<p>停止uWSGI服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uwsgi --stop uwsgi/uwsgi.pid</span><br></pre></td></tr></table></figure>


<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure>
<h3 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conf/nginx/uc_nginx.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># the upstream component nginx needs to connect to</span></span><br><span class="line">upstream django &#123;</span><br><span class="line"><span class="comment"># server unix:///path/to/your/mysite/mysite.sock; # for a file socket</span></span><br><span class="line">server 127.0.0.1:8000; <span class="comment"># for a web port socket (we'll use this first)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># configuration of the server</span></span><br><span class="line">server &#123;</span><br><span class="line"><span class="comment"># the port your site will be served on</span></span><br><span class="line">listen 80;</span><br><span class="line"><span class="comment"># the domain name it will serve for</span></span><br><span class="line">server_name 服务器ip; <span class="comment"># substitute your machine's IP address or FQDN</span></span><br><span class="line">charset utf-8;</span><br><span class="line"><span class="comment"># max upload size</span></span><br><span class="line">client_max_body_size 75M; <span class="comment"># adjust to taste</span></span><br><span class="line"><span class="comment"># Django media</span></span><br><span class="line">location /media &#123;</span><br><span class="line"> <span class="built_in">alias</span> /root/django/FreeStudy/media; <span class="comment"># 指向django的media目录</span></span><br><span class="line">&#125;</span><br><span class="line">location /static &#123;</span><br><span class="line"> <span class="built_in">alias</span> /root/django/FreeStudy/static; <span class="comment"># 指向django的static目录</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># Finally, send all non-media requests to the Django server.</span></span><br><span class="line">location / &#123;</span><br><span class="line"> uwsgi_pass 127.0.0.1:8000;</span><br><span class="line"> include  /etc/nginx/uwsgi_params; <span class="comment"># the uwsgi_params file you installed</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将上述配置文件加入到nginx的启动配置文件中:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s /root/django/FreeStudy/conf/nginx/uc_nginx.conf /etc/nginx/conf.d/</span><br></pre></td></tr></table></figure>

<p>拉取所有需要的static file 到同一个目录<br>在django的setting文件中，添加下面一行内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">"static/"</span>)</span><br></pre></td></tr></table></figure>
<p>运行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 manage.py collectstatic</span><br></pre></td></tr></table></figure>

<p>启动nginx：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/sbin/nginx</span><br></pre></td></tr></table></figure>
<p>没有报错，查看进程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ntlp</span><br></pre></td></tr></table></figure>
<p>没有看到uwsgi监听的端口</p>
<h3 id="解决Uwsgi没有启动"><a href="#解决Uwsgi没有启动" class="headerlink" title="解决Uwsgi没有启动"></a>解决Uwsgi没有启动</h3><p>使用curl 127.0.0.1:8000查看返回：<br>报错：<br>curl: (7) Failed connect to 127.0.0.1:8000; Connection refused</p>
<p>uwsgi错误检查：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">查看uwsgi进程运行:</span><br><span class="line"> ps -ef|grep uwsgi</span><br><span class="line"></span><br><span class="line">没有发现运行的进程。</span><br><span class="line"></span><br><span class="line">停止uwsgi：</span><br><span class="line">pkill -f uwsgi -9</span><br><span class="line"></span><br><span class="line">启动uwsgi：</span><br><span class="line">uwsgi  --ini  uwsgi.ini</span><br><span class="line"></span><br><span class="line">再次查看进程，还是没有！</span><br><span class="line">多次尝试修改配置文件，还是不行</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">要先运行项目：</span><br><span class="line">python3 manage.py runserver 0.0.0.0:8000</span><br><span class="line">注意端口是8000，要与uwsgi中配置一致</span><br><span class="line"></span><br><span class="line">执行uwsgi配置运行服务器：</span><br><span class="line">uwsgi -i /root/django/FreeStudy/conf/uwsgi/uwsgi.ini &amp; </span><br><span class="line">与刚开始上面不一样的输出。</span><br></pre></td></tr></table></figure>

<p>查看进程:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef|grep uwsgi</span><br></pre></td></tr></table></figure>
<p><img src="/2020/04/01/Docker-Uwsgi-Nginx%E9%83%A8%E7%BD%B2Django%E9%A1%B9%E7%9B%AE/1.png" alt="1"></p>
<p>多了很多进程，一开始失败时只有最下面一个。大概率成功运行了。</p>
<p>在kill掉nginx进程的前提下，再次开启nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/sbin/nginx</span><br></pre></td></tr></table></figure>
<p>并检查检查，成功发行uwsgi进程</p>
<p><img src="/2020/04/01/Docker-Uwsgi-Nginx%E9%83%A8%E7%BD%B2Django%E9%A1%B9%E7%9B%AE/2.png" alt="2"></p>
<p>使用curl ip地址<br>成功获取页面。</p>
<h3 id="获取静态文件报错"><a href="#获取静态文件报错" class="headerlink" title="获取静态文件报错"></a>获取静态文件报错</h3><p>浏览器发现静态文件获取有误，报403错误，图片没有加载出来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx</span><br><span class="line">vim nginx.conf</span><br><span class="line"></span><br><span class="line">将user nginx;</span><br><span class="line">改为：user root;</span><br><span class="line"></span><br><span class="line">重启nginx：</span><br><span class="line">/usr/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
<p>成功。</p>
<p>注意：<br>当使用python3 manage.py createsuperuser等出现报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERRORS:</span><br><span class="line">?: (staticfiles.E002) The STATICFILES_DIRS setting should not contain the STATIC_ROOT setting.</span><br><span class="line"></span><br><span class="line">将settings.py修改：</span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">"/static/"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">python3 manage.py createsuperuser</span><br><span class="line"></span><br><span class="line">出现reload不存在问题：</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/lib/python3.6/site-packages/</span><br><span class="line">vim sitecustomize_back.py</span><br><span class="line">内容为：</span><br><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line">             import sys</span><br><span class="line">             reload(sys)</span><br><span class="line">             sys.setdefaultencoding(<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line">出现报错：</span><br><span class="line">UnicodeEncodeError: <span class="string">'ascii'</span> codec can<span class="string">'t encode characters in position 0-2: ordinal not in range(128)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">执行：</span></span><br><span class="line"><span class="string">export PYTHONIOENCODING=utf-8</span></span><br></pre></td></tr></table></figure>

<h2 id="设置外网访问服务器数据库："><a href="#设置外网访问服务器数据库：" class="headerlink" title="设置外网访问服务器数据库："></a>设置外网访问服务器数据库：</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'外网访问密码'</span> WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h3 id="Navicat无法连接"><a href="#Navicat无法连接" class="headerlink" title="Navicat无法连接"></a>Navicat无法连接</h3><p>解决:<br>    上面修改了访问限权，容器之间的访问会受影响，需要到项目settings.py<br>    修改数据库连接配置，将连接密码由原来的root1234改为外网连接的密码</p>
<p>nginx：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ntlp 查看进程状态</span><br><span class="line"><span class="built_in">kill</span> nginx的进程</span><br><span class="line"></span><br><span class="line">重新启动:</span><br><span class="line">/usr/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/01/Docker-Uwsgi-Nginx%E9%83%A8%E7%BD%B2Django%E9%A1%B9%E7%9B%AE/4.png" alt="4"></p>
<p>进入mariadb容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install vim</span><br><span class="line"></span><br><span class="line">grep -rn <span class="string">"skip-networking"</span> *</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/01/Docker-Uwsgi-Nginx%E9%83%A8%E7%BD%B2Django%E9%A1%B9%E7%9B%AE/5.png" alt="5"></p>
<p><img src="/2020/04/01/Docker-Uwsgi-Nginx%E9%83%A8%E7%BD%B2Django%E9%A1%B9%E7%9B%AE/6.png" alt="6"></p>
<p>确保已经被注释掉了</p>
<h3 id="创建Mariadb镜像备份："><a href="#创建Mariadb镜像备份：" class="headerlink" title="创建Mariadb镜像备份："></a>创建Mariadb镜像备份：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit -m<span class="string">"mariadb"</span> -a<span class="string">"Such"</span> 容器id mariadb:v1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -t -i mariadb:v1 /bin/bash</span><br><span class="line"></span><br><span class="line">docker run --name mariadb –network=host -p 3301:3306 -d -v /root/mdbdata:/var/lib/mysql  -e MYSQL_ROOT_PASSWORD=root1234 mariadb:v1</span><br></pre></td></tr></table></figure>

<h2 id="redis容器"><a href="#redis容器" class="headerlink" title="redis容器"></a>redis容器</h2><p>实现邮箱验证码功能还要安装redis容器：<br>拉取镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull redis:latest</span><br></pre></td></tr></table></figure>

<p>运行容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -itd --name redis -p 6379:6379 redis</span><br></pre></td></tr></table></figure>
<p>邮箱验证码运行成功。</p>
<h2 id="解决拉取pull速度慢："><a href="#解决拉取pull速度慢：" class="headerlink" title="解决拉取pull速度慢："></a>解决拉取pull速度慢：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">	vim /etc/docker/daemon.json</span><br><span class="line">	</span><br><span class="line">	&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://9cpn8tt6.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">	重启服务：</span><br><span class="line">	systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">		</span><br><span class="line">		注意：此操作会将部分容器重启甚至停掉，需要使用docker start 容器名 开启。</span><br><span class="line">		并且mariadb的ip也变更了，需要至settings.py更新ip地址。</span><br><span class="line">		重启应用：</span><br><span class="line">			停止uwsgi：</span><br><span class="line">			ps -ef|grep uwsgi 查看进程</span><br><span class="line">			pkill -f uwsgi -9</span><br><span class="line">			nginx：</span><br><span class="line">			netstat -ntlp 查看进程状态</span><br><span class="line">			<span class="built_in">kill</span> nginx的进程</span><br><span class="line">		</span><br><span class="line">			python3 manage.py runserver 0.0.0.0:8000</span><br><span class="line">			</span><br><span class="line">			启动uwsgi与nginx：</span><br><span class="line">			uwsgi  --ini  uwsgi.ini (有时会失灵）</span><br><span class="line">			可使用uwsgi -i /root/django/FreeStudy/conf/uwsgi/uwsgi.ini &amp;</span><br><span class="line">			</span><br><span class="line">			/usr/sbin/nginx -s reload</span><br><span class="line">```			</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## xadmin无法加载css与js：</span></span><br><span class="line">```bash</span><br><span class="line"> python3 manage.py collectstatic</span><br></pre></td></tr></table></figure>
<p>自动把后台CSS样式和其他相关文件资源收集到/static/目录下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">报错：</span><br><span class="line">django.core.exceptions.ImproperlyConfigured: You<span class="string">'re using the staticfiles app without having set the STATIC_ROOT setting to a filesystem path.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">settings.py加入：</span></span><br><span class="line"><span class="string">STATIC_ROOT = os.path.join(BASE_DIR, '</span>static<span class="string">')</span></span><br></pre></td></tr></table></figure>


<h2 id="域名解析："><a href="#域名解析：" class="headerlink" title="域名解析："></a>域名解析：</h2><p>添加解析后，将nginx配置文件（uc_nginx.conf)修改,<br>将ip地址改为你购买的域名地址</p>
<h2 id="vim相关操作："><a href="#vim相关操作：" class="headerlink" title="vim相关操作："></a>vim相关操作：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入 i表示插入</span><br><span class="line">操作完成后ESC</span><br><span class="line">输入：q直接退出，:q!强制退出</span><br><span class="line">输入：wq保存并退出</span><br><span class="line">直接输入ggV全选单行，输入ggVG全选全部，再接着输入d，即删除全部。</span><br></pre></td></tr></table></figure>

<h2 id="容器操作："><a href="#容器操作：" class="headerlink" title="容器操作："></a>容器操作：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl+D可退出容器路径</span><br></pre></td></tr></table></figure>

<p>制作应用镜像备份：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker commit -m<span class="string">"freestudy"</span> -a<span class="string">"Such"</span> 容器id freestudy:v1</span><br></pre></td></tr></table></figure>

<p>删除镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi 镜像id</span><br></pre></td></tr></table></figure>


<h2 id="更新文件："><a href="#更新文件：" class="headerlink" title="更新文件："></a>更新文件：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">可使用xftp直接修改文件，然后复制到容器实现修改。</span><br><span class="line">docker cp /root/django/FreeStudy/apps/users/models.py freestudy:/root/django/FreeStudy/apps/users/models.py</span><br><span class="line"></span><br><span class="line">多个文件：</span><br><span class="line">新建一个文件夹，将文件放至其中，</span><br><span class="line">docker cp /root/django/FreeStudy/templates/html/. freestudy:/root/django/FreeStudy/templates</span><br><span class="line">加多一个 . 即可将全部文件传输。</span><br></pre></td></tr></table></figure>

<p>涉及到数据表的修改要makemigrations与 migrate<br>然后停止uwsgi（避免占用8000端口），再运行python3 manage.py runserver 0.0.0.0:8000<br>启动uwsgi</p>
<h2 id="邮箱服务器安全性"><a href="#邮箱服务器安全性" class="headerlink" title="邮箱服务器安全性"></a>邮箱服务器安全性</h2><p>之前邮箱服务器使用了账号密码不安全，现改为授权码，同时之前使用的密码登陆服务失效，需要重新部署：<br>EMAIL_HOST_PASSWORD = ‘授权码’</p>
<p>重新runserver，发现mysql连接报错。<br>尝试改了host地址，服务器的ip，数据库容器ip地址都不行。。<br>最后使用数据库容器ip 172.17.0.2，密码是外部连接的密码！连接成功。。稀奇古怪呀！</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Uwsgi</tag>
        <tag>Nginx</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云服务器部署</title>
    <url>/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>阿里云个人服务器体验版</p><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p>Ubuntu14.04 32位</p><h3 id="故障"><a href="#故障" class="headerlink" title="故障"></a>故障</h3><p>python2.7的pip install aiohttp会报错，使用Python3的pip：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure><p>注意：python3.4无法安装aiohttp，但安装3.6后与.34共存会破坏pip3，使安装包时报错！</p><a id="more"></a>




<p>删除Python3.4</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get remove python3.4</span><br></pre></td></tr></table></figure>

<p>获取pip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</span><br></pre></td></tr></table></figure>
<p>安装Python3-pip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 get-pip.py --force-reinstall</span><br></pre></td></tr></table></figure>
<p>检查pip版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip -V</span><br></pre></td></tr></table></figure>
<p>发现pip变成python3.6的包路径下了，2.7的pip没了。</p>
<p>重新安装Python2-pip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python2 get-pip.py --force-reinstall</span><br></pre></td></tr></table></figure>
<p>重新安装Python3-pip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install python3-pip</span><br></pre></td></tr></table></figure>
<p>再次检查pip版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 -V</span><br></pre></td></tr></table></figure>
<p>显示定向到python3.6；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip -V</span><br></pre></td></tr></table></figure>
<p>显示定向到python2.7，成功！</p>
<p>最后再试试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install aiohttp aiomysql jinja2</span><br></pre></td></tr></table></figure>
<p>没有报错了！</p>
<p>如果后面再报无sourcefileloader的错误就：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 get-pip.py --force-reinstall</span><br></pre></td></tr></table></figure>
<p><img src="/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/1.png" alt="1"></p>
<h3 id="安装虚拟服务"><a href="#安装虚拟服务" class="headerlink" title="安装虚拟服务"></a>安装虚拟服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install virtualenv</span><br></pre></td></tr></table></figure>

<h3 id="修改默认版本方法"><a href="#修改默认版本方法" class="headerlink" title="修改默认版本方法"></a>修改默认版本方法</h3><p>配置只输入python3时就默认使用3.6版本：<br>也可使用上面链接里说明的方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.5 1</span><br><span class="line">update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 2</span><br><span class="line">update-alternatives --config python3</span><br><span class="line">python3 -V</span><br></pre></td></tr></table></figure>
<p>设置pip:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install python3-pip　　　　<span class="comment"># Python3</span></span><br><span class="line">apt-get install python-pip　　　　  <span class="comment"># Python2</span></span><br></pre></td></tr></table></figure>
<p>来自 <a href="https://www.cnblogs.com/eczhou/p/10245331.html" target="_blank" rel="noopener">https://www.cnblogs.com/eczhou/p/10245331.html</a> </p>
<h3 id="尝试安装"><a href="#尝试安装" class="headerlink" title="尝试安装"></a>尝试安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:jonathonf/python-3.6</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install python3.6</span><br></pre></td></tr></table></figure>
<p>若 add-apt-repository 未安装，则：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install software-properties-common python-software-properties</span><br></pre></td></tr></table></figure>
<p>↑↑↑还是解决不了，出现报错，无法安装aiomysql</p>
<h2 id="初始化硬盘，重新配置"><a href="#初始化硬盘，重新配置" class="headerlink" title="初始化硬盘，重新配置"></a>初始化硬盘，重新配置</h2><h3 id="安装相应依赖"><a href="#安装相应依赖" class="headerlink" title="安装相应依赖"></a>安装相应依赖</h3><p>zlib1g和zlib1g-dev<br>下载：<br>zlib1g_1.2.8.dfsg-1ubuntu1.1_i386.deb和zlib1g-dev_1.2.8.dfsg-1ubuntu1_i386.deb</p>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i zlib1g_1.2.8.dfsg-1ubuntu1.1_i386.deb</span><br><span class="line">sudo dpkg -i zlib1g-dev_1.2.8.dfsg-1ubuntu1_i386.deb</span><br></pre></td></tr></table></figure>
<p>检查是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -l|grep zlib</span><br></pre></td></tr></table></figure>

<h3 id="安装python3-6-9："><a href="#安装python3-6-9：" class="headerlink" title="安装python3.6.9："></a>安装python3.6.9：</h3><p>新建路径：<br>/opt/setups/</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir setups</span><br></pre></td></tr></table></figure>
<p>进入上面的路径，下载压缩包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz</span><br></pre></td></tr></table></figure>

<p>解压：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tar zxvf Python-3.6.3.tgz</span><br></pre></td></tr></table></figure>
<p>进入安装包的路径：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Python-3.6.9</span><br></pre></td></tr></table></figure>
<p>然后把python安装到文件夹/usr/local/python3下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./configure --prefix=/usr/<span class="built_in">local</span>/python3</span><br></pre></td></tr></table></figure>
<p>执行make命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make</span><br></pre></td></tr></table></figure>
<p>执行make install：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<h3 id="删除软连接："><a href="#删除软连接：" class="headerlink" title="删除软连接："></a>删除软连接：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf /usr/bin/python3</span><br></pre></td></tr></table></figure>
<p><img src="/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/2.png" alt="2"></p>
<p><img src="/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/3.png" alt="3"></p>
<h3 id="pip3-install的时候报错’lsb-release-a’"><a href="#pip3-install的时候报错’lsb-release-a’" class="headerlink" title="pip3 install的时候报错’lsb_release -a’"></a>pip3 install的时候报错’lsb_release -a’</h3><p>python3.6.9不支持lsb_release -a命令，所以就会报那个错误，但是系统自带的python3.5支持这个命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/bin/lsb_release</span><br></pre></td></tr></table></figure>
<p>把文件/usr/bin/lsb_release的第一行换成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3.4 -Es</span></span><br></pre></td></tr></table></figure>
<p>然后发现pip版本需要升级：<br><img src="/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/4.png" alt="4"></p>
<p><img src="/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/5.png" alt="5"><br>出现了之前一直无法解决的问题↑↑</p>
<h3 id="安装libssl-dev"><a href="#安装libssl-dev" class="headerlink" title="安装libssl-dev"></a>安装libssl-dev</h3><p>启动系统框架并执行更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg --add-architecture i386</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install libssl-dev</span><br></pre></td></tr></table></figure>
<p><img src="/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/6.png" alt="6"></p>
<p>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get -f install</span><br></pre></td></tr></table></figure>
<p>该命令的含义是去补全那些缺少的软件。</p>
<p>重新执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssl</span><br><span class="line">sudo apt-get install libssl-dev</span><br></pre></td></tr></table></figure>
<p><img src="/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/7.png" alt="7"></p>
<p>成功！！</p>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p><img src="/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/8.png" alt="8"></p>
<h3 id="测试app-py"><a href="#测试app-py" class="headerlink" title="测试app.py"></a>测试app.py</h3><p><img src="/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/9.png" alt="9"></p>
<p>对python3.6重新编译安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Python-3.6.9</span><br><span class="line">sudo ./configure --with-ssl --prefix=/usr/<span class="built_in">local</span>/python3 （安装的路径一定要和第一次一样）</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p>测试成功。</p>
<h3 id="配置supervisor"><a href="#配置supervisor" class="headerlink" title="配置supervisor"></a>配置supervisor</h3><p>awesome.conf:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">command</span> = python3 /srv/awesome/www/app.py</span><br></pre></td></tr></table></figure>
<p>发现可以运行，不用建虚拟环境了~</p>
<h3 id="文件修改的更新"><a href="#文件修改的更新" class="headerlink" title="文件修改的更新"></a>文件修改的更新</h3><p>在windows下执行fabfile.py即可实现文件修改的更新，需要注意的是，ip填写阿里云提供的公网ip，遇到无法删除的目录，可以使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf</span><br></pre></td></tr></table></figure>

<h3 id="修改安全组规整"><a href="#修改安全组规整" class="headerlink" title="修改安全组规整"></a>修改安全组规整</h3><p>在外网进入部署的网站前， 还要在阿里云修改安全组规整:</p>
<p><img src="/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/10.png" alt="10"></p>
<p>这样就可以直接使用ip地址访问页面了。</p>
<p>至此阿里云ubuntu14.04 32位服务器就部署完成了，部分内容与上一章页如出一辙，部分难以解决的问题在这里进行的分析解决。</p>
<p>要是可以使用企业版的服务器，系统版本可以选择Ubuntu16，就不会出现这么多报错，也不用这么麻烦了！ε=(´ο｀*)))</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>博客近期文章功能</title>
    <url>/2019/11/09/%E5%8D%9A%E5%AE%A2%E8%BF%91%E6%9C%9F%E6%96%87%E7%AB%A0%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="版本信息："><a href="#版本信息：" class="headerlink" title="版本信息："></a>版本信息：</h2><p>Nexo：4.0.0<br>Next：7.5.0</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="初步方法"><a href="#初步方法" class="headerlink" title="初步方法"></a>初步方法</h3><p>一开始想实现这个功能时，是参考网上的写法来写的：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">     &lt;!--近期文章版块 began--&gt;</span><br><span class="line">                         &#123;% <span class="keyword">if</span> theme.recent_posts %&#125;</span><br><span class="line">                                 &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"links-of-blogroll motion-element &#123;&#123; "</span>links-<span class="keyword">of</span>-blogroll-<span class="string">" + theme.recent_posts_layout  &#125;&#125;"</span>&gt;</span><br><span class="line">                                     &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"links-of-blogroll-title"</span>&gt;</span><br><span class="line">                                         &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;"</span> aria-hidden=<span class="string">"true"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">                                         &#123;&#123; theme.recent_posts_title &#125;&#125;</span><br><span class="line">                                     &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                                     &lt;ul class="links-of-blogroll-list"&gt;</span></span><br><span class="line"><span class="regexp">                                         &#123;% set posts = site.posts.sort('-date') %&#125;</span></span><br><span class="line"><span class="regexp">                                        &#123;% for post in posts.slice('0', '5') %&#125;</span></span><br><span class="line"><span class="regexp">                                            &lt;li class='my-links-of-blogroll-li'&gt;</span></span><br><span class="line"><span class="regexp">                                                &lt;a href="&#123;&#123; url_for(post.path) &#125;&#125;" title="&#123;&#123; post.title &#125;&#125;" target="_blank"&gt;&#123;&#123; post.title &#125;&#125;&lt;/</span>a&gt;</span><br><span class="line">                                            &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">                                        &#123;% endfor %&#125;</span></span><br><span class="line"><span class="regexp">                                    &lt;/u</span>l&gt;</span><br><span class="line">                                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                        &#123;% endif %&#125;</span></span><br><span class="line"><span class="regexp">                        &lt;!--近期文章版块 end--&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a>


<p>插入到sidebar.swig中。</p>
<h3 id="主题配置文件中加入："><a href="#主题配置文件中加入：" class="headerlink" title="主题配置文件中加入："></a>主题配置文件中加入：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">     #近期文章</span><br><span class="line">     recent_posts_title: 近期文章</span><br><span class="line">     recent_posts_layout: block</span><br><span class="line">     recent_posts: <span class="literal">true</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>查看效果发现网页未能获取到文章的path与title。<br><img src="/2019/11/09/%E5%8D%9A%E5%AE%A2%E8%BF%91%E6%9C%9F%E6%96%87%E7%AB%A0%E5%8A%9F%E8%83%BD/1.png" alt="1"></p>
<h2 id="开始调试："><a href="#开始调试：" class="headerlink" title="开始调试："></a>开始调试：</h2><h3 id="检查函数方法："><a href="#检查函数方法：" class="headerlink" title="检查函数方法："></a>检查函数方法：</h3><p>检查sort与slice是否有问题，用排除法：<br>添加多个文章，发现能截取5个文章，说明slice正常。<br>去除sort方法，不执行排序，然后查看网页效果，发现仍未能获取到，说明问题不在sort方法上。</p>
<p>还尝试了换不同方法的写法来排序：sort(‘date’,-1)等，出现报错等。</p>
<h3 id="检查变量："><a href="#检查变量：" class="headerlink" title="检查变量："></a>检查变量：</h3><p>查看Nexo官方文档，发现site.posts是获取整个网页的文章，site是网页变量，posts是全部文章的属性。<br>尝试单独输出site或site.posts，发现这是一个封装好的object，无法查看其中的内容。</p>
<h3 id="检查版本问题："><a href="#检查版本问题：" class="headerlink" title="检查版本问题："></a>检查版本问题：</h3><p>之前安装Hexo我是按照网上一个教程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>

<p>但查看Hexo官方文档的安装方法，却是这样的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>不同安装方法，最后安装的Next的主题默认版本都不同，<br>教程：Next 7.5.0<br>官方：Next 5.1.4</p>
<p>发现使用Next 5.1.4插入上述代码，成功实现近期文章效果，成功获取。<br>而且发现5.1.4的文件与7.5.0有一定的区别。<br>一开始我的解决办法是想干脆将博客转到Next 5.1.4算了，但发现旧版主题网页的显示效果没有新版的好，而且迁移过程耗费精力，就放弃了。</p>
<h2 id="新的解决办法"><a href="#新的解决办法" class="headerlink" title="新的解决办法"></a>新的解决办法</h2><h3 id="查看官方文档"><a href="#查看官方文档" class="headerlink" title="查看官方文档"></a>查看官方文档</h3><p>开始查看Next的github官网文档，发现7.5.0更换了模板引擎，使用了Nunjucks作为模板引擎。<br>提出issue，官方人员提示我尝试使用toArray()来解决。</p>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>在修改为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">site.posts.toArray()</span><br></pre></td></tr></table></figure>
<p>执行出现报错，然后去除sort和slice，再次执行，成功实现。</p>
<p>然后再依次加上slice和sort，发现当使用sort方法时出现报错。</p>
<p>考虑到要同时兼顾Nunjucks的写法来使用，查看文档：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sort(arr, reverse, caseSens, attr)</span><br></pre></td></tr></table></figure>
<p>用JavaScript中的arr.sort函数排序arr。如果reverse为true，则会返回相反的 排序结果。默认状态下排序不会区分大小写，但你可以将caseSens设置为true来让排序 区分大小写。我们可以用attr来指定要比较的属性。</p>
<h3 id="不同sort写法"><a href="#不同sort写法" class="headerlink" title="不同sort写法"></a>不同sort写法</h3><p>然后尝试了不同的写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">site.posts.toArray().sort(<span class="string">'-date'</span>)</span><br></pre></td></tr></table></figure>

<p>或：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">site.posts.toArray().sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.date - b.date</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>还有默认的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">site.posts.sort()</span><br><span class="line"></span><br><span class="line">site.posts.sort(Reverse = True)</span><br></pre></td></tr></table></figure>
<h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><p>都出现了类似的报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">     （报错代码片段）：</span><br><span class="line">     ERROR Render HTML failed: 404.html</span><br><span class="line">     TypeError: Cannot <span class="built_in">read</span> property <span class="string">'replace'</span> of null</span><br><span class="line">     at Hexo.externalLinkFilter (E:\hexo\node_modules\hexo\lib\plugins\filter\after_render\external_link.js:45:15)</span><br><span class="line">     at Hexo.tryCatcher (E:\hexo\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">     at Hexo. (E:\hexo\node_modules\bluebird\js\release\method.js:15:34)</span><br><span class="line">     at Promise.each.filter (E:\hexo\node_modules\hexo\lib\extend\filter.js:60:50)</span><br><span class="line">     at tryCatcher (E:\hexo\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">     at Object.gotValue (E:\hexo\node_modules\bluebird\js\release\reduce.js:166:18)</span><br><span class="line">    at Object.gotAccum (E:\hexo\node_modules\bluebird\js\release\reduce.js:155:25)</span><br><span class="line">    at Object.tryCatcher (E:\hexo\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (E:\hexo\node_modules\bluebird\js\release\promise.js:547:31)</span><br><span class="line">    at Promise._settlePromise (E:\hexo\node_modules\bluebird\js\release\promise.js:604:18)</span><br><span class="line">    at Promise._settlePromiseCtx (E:\hexo\node_modules\bluebird\js\release\promise.js:641:10)</span><br><span class="line">    at _drainQueueStep (E:\hexo\node_modules\bluebird\js\release\async.js:97:12)</span><br><span class="line">    at _drainQueue (E:\hexo\node_modules\bluebird\js\release\async.js:86:9)</span><br><span class="line">    at Async._drainQueues (E:\hexo\node_modules\bluebird\js\release\async.js:102:5)</span><br><span class="line">    at Immediate.Async.drainQueues [as _onImmediate] (E:\hexo\node_modules\bluebird\js\release\async.js:15:14)</span><br><span class="line">    at runCallback (timers.js:705:18)</span><br><span class="line">    at tryOnImmediate (timers.js:676:5)</span><br><span class="line">    at processImmediate (timers.js:658:5)</span><br><span class="line">    ERROR Render HTML failed: categories/index.html</span><br><span class="line">    TypeError: Cannot <span class="built_in">read</span> property <span class="string">'replace'</span> of null</span><br><span class="line">    at Hexo.externalLinkFilter (E:\hexo\node_modules\hexo\lib\plugins\filter\after_render\external_link.js:45:15)</span><br><span class="line">    at Hexo.tryCatcher (E:\hexo\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Hexo. (E:\hexo\node_modules\bluebird\js\release\method.js:15:34)</span><br><span class="line">    at Promise.each.filter (E:\hexo\node_modules\hexo\lib\extend\filter.js:60:50)</span><br><span class="line">    at tryCatcher (E:\hexo\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Object.gotValue (E:\hexo\node_modules\bluebird\js\release\reduce.js:166:18)</span><br><span class="line">    at Object.gotAccum (E:\hexo\node_modules\bluebird\js\release\reduce.js:155:25)</span><br></pre></td></tr></table></figure>

<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>经静下心来思考，想到既然：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">site.posts.sort(<span class="string">'-date'</span>)</span><br></pre></td></tr></table></figure>
<p>这样不报错，而：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">site.posts.toArray().sort(<span class="string">'-date'</span>)</span><br></pre></td></tr></table></figure>
<p>转换为数组后再排序就报错。</p>
<p>为何不试下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">site.posts.sort(<span class="string">'-date'</span>).toArray()</span><br></pre></td></tr></table></figure>
<p>先排序好再转换为数组？</p>
<h3 id="成功实现"><a href="#成功实现" class="headerlink" title="成功实现"></a>成功实现</h3><p>修改过后重新部署，成功实现！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--近期文章版块 began--&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.recent_posts %&#125;</span><br><span class="line">	&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"links-of-blogroll motion-element &#123;&#123; "</span>links-<span class="keyword">of</span>-blogroll-<span class="string">" + theme.recent_posts_layout  &#125;&#125;"</span>&gt;</span><br><span class="line">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"links-of-blogroll-title"</span>&gt;</span><br><span class="line">                  &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;"</span> aria-hidden=<span class="string">"true"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">                  &#123;&#123; theme.recent_posts_title &#125;&#125;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">		&lt;ul class="links-of-blogroll-list"&gt;</span></span><br><span class="line"><span class="regexp">			&#123;% set posts = site.posts.sort('-date').toArray() %&#125;</span></span><br><span class="line"><span class="regexp">        	&#123;% for post in posts.slice(0,5) %&#125;</span></span><br><span class="line"><span class="regexp">            	&lt;li class='my-links-of-blogroll-li'&gt;</span></span><br><span class="line"><span class="regexp">            	&lt;a href="&#123;&#123; url_for(post.path) &#125;&#125;" title= "&#123;&#123; post.title &#125;&#125;" target="_blank"&gt;&#123;&#123; post.title &#125;&#125;&lt;/</span>a&gt;</span><br><span class="line">            	&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &#123;% endfor %&#125;                  </span></span><br><span class="line"><span class="regexp">    	&lt;/u</span>l&gt;</span><br><span class="line">     &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br><span class="line"><span class="regexp">&lt;!--近期文章版块 end--&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/09/%E5%8D%9A%E5%AE%A2%E8%BF%91%E6%9C%9F%E6%96%87%E7%AB%A0%E5%8A%9F%E8%83%BD/2.png" alt="2"></p>
<p>成功实现新版Next主题的近期文章功能。<br>这其中的修改要兼顾Nexo和Next主题模板引擎Nunjucks！</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>部署Python Web App</title>
    <url>/2019/11/07/%E9%83%A8%E7%BD%B2Python%20Web%20App/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Linux端-服务器）Ubuntu18-04-3："><a href="#Linux端-服务器）Ubuntu18-04-3：" class="headerlink" title="Linux端(服务器）Ubuntu18.04.3："></a>Linux端(服务器）Ubuntu18.04.3：</h2><h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><p>ssh服务；<br>Nginx （web服务器）；<br>Supervisor（python3）监控服务，管理进程；<br>Mysql；<br>jinjia2；<br>aiomysql；<br>aiohttp；<br>python3；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install nginx supervisor python3 mysql-server</span><br><span class="line"></span><br><span class="line">$ sudo pip3 install jinja2 aiomysql aiohttp</span><br></pre></td></tr></table></figure><a id="more"></a>


<h3 id="初始化Mysql数据库："><a href="#初始化Mysql数据库：" class="headerlink" title="初始化Mysql数据库："></a>初始化Mysql数据库：</h3><p>进入mysql命令行，使用source + sql文件路径执行脚本创建表；</p>
<h3 id="定义目录结构："><a href="#定义目录结构：" class="headerlink" title="定义目录结构："></a>定义目录结构：</h3><p>/<br>+- srv/<br>   +- awesome/       &lt;– Web App根目录<br>      +- www/        &lt;– 存放Python源码<br>      |  +- static/  &lt;– 存放静态资源文件<br>      +- log/        &lt;– 存放log</p>
<h3 id="使用虚拟环境："><a href="#使用虚拟环境：" class="headerlink" title="使用虚拟环境："></a>使用虚拟环境：</h3><p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install virtualenv</span><br></pre></td></tr></table></figure>

<p>创建:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virtualenv .env --python=python3</span><br></pre></td></tr></table></figure>

<p>激活:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> .env/bin/activate</span><br></pre></td></tr></table></figure>

<h3 id="安装supervisor"><a href="#安装supervisor" class="headerlink" title="安装supervisor"></a>安装supervisor</h3><p>生成配置文件:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">echo_supervisord_conf &gt; supervisord.conf</span><br></pre></td></tr></table></figure>

<p>配置:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awesome.conf(位于etc/supervisor/conf.d):</span><br><span class="line"><span class="built_in">command</span> = /home/such/.env/bin/python3 /srv/awesome/www/app.py runserver</span><br></pre></td></tr></table></figure>

<p>注意：supervisor不要添加多个command，如果其中一个command出错，而另一个正常，则整体还是可以运行的！！<br>即：command = 。。。<br>       command =。。。</p>
<p>编写一个Supervisor的配置文件awesome.conf，存放到/etc/supervisor/conf.d/目录下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[program:awesome]</span><br><span class="line"><span class="built_in">command</span> = /home/such/.env/bin/python3 /srv/awesome/www/app.py runserver</span><br><span class="line">directory   = /srv/awesome/www</span><br><span class="line">user        = such</span><br><span class="line">startsecs   = 3</span><br><span class="line">redirect_stderr         = <span class="literal">true</span></span><br><span class="line">stdout_logfile_maxbytes = 50MB</span><br><span class="line">stdout_logfile_backups  = 10</span><br><span class="line">stdout_logfile          = /srv/awesome/<span class="built_in">log</span>/app.log</span><br></pre></td></tr></table></figure>

<p>配置文件通过[program:awesome]指定服务名为awesome，command指定启动app.py。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">执行配置更新：</span><br><span class="line"><span class="variable">$sudo</span> supervisorctl reread</span><br><span class="line"><span class="variable">$sudo</span> supervisorctl update</span><br><span class="line"><span class="variable">$sudo</span> supervisorctl reload</span><br><span class="line"><span class="variable">$sudo</span> supervisorctl start awesome</span><br></pre></td></tr></table></figure>

<h3 id="nginx配置："><a href="#nginx配置：" class="headerlink" title="nginx配置："></a>nginx配置：</h3><p>/etc/nginx/sites-available/下有个default文件，添加新配置awesome并不会生效。因此直接修改default文件进行配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen      80; <span class="comment"># 监听80端口</span></span><br><span class="line">root       /srv/awesome/www;</span><br><span class="line">    access_log /srv/awesome/<span class="built_in">log</span>/access_log;</span><br><span class="line">    error_log  /srv/awesome/<span class="built_in">log</span>/error_log;</span><br><span class="line"><span class="comment"># server_name awesome.liaoxuefeng.com; # 配置域名</span></span><br><span class="line"><span class="comment"># 处理静态文件/favicon.ico:</span></span><br><span class="line">    location /favicon.ico &#123;</span><br><span class="line">        root /srv/awesome/www;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># 处理静态资源:</span></span><br><span class="line">    location ~ ^\/static\/.*$ &#123;</span><br><span class="line">        root /srv/awesome/www;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># 动态请求转发到9000端口:</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass       http://127.0.0.1:9000;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在/etc/nginx/sites-enabled/目录下创建软链接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/etc/nginx/sites-enabled</span><br><span class="line">$ sudo ln -s /etc/nginx/sites-available/awesome</span><br><span class="line">让Nginx重新加载配置文件:</span><br><span class="line">$ sudo /etc/init.d/nginx reload</span><br></pre></td></tr></table></figure>

<h3 id="获取ip："><a href="#获取ip：" class="headerlink" title="获取ip："></a>获取ip：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig -a</span><br></pre></td></tr></table></figure>

<h2 id="未找到dos2unix报错"><a href="#未找到dos2unix报错" class="headerlink" title="未找到dos2unix报错:"></a>未找到dos2unix报错:</h2><h3 id="1-安装tofrodos"><a href="#1-安装tofrodos" class="headerlink" title="1.安装tofrodos"></a>1.安装tofrodos</h3><p>sudo apt-get install tofrodos<br>实际上它安装了两个工具：todos（相当于unix2dos），和fromdos（相当于dos2unix）</p>
<h3 id="2-做一些优化"><a href="#2-做一些优化" class="headerlink" title="2.做一些优化"></a>2.做一些优化</h3><p>由于习惯了unix2dos和dos2unix的命令，可以把上面安装的两个工具链接成unix2dos 和dos2unix，或者仅仅是起个别名，并放在启动脚本里。<br>步骤：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s /usr/bin/todos /usr/bin/unix2dos </span><br><span class="line">ln -s /usr/bin/fromdos /usr/bin/dos2unix</span><br></pre></td></tr></table></figure>


<h2 id="开发机："><a href="#开发机：" class="headerlink" title="开发机："></a>开发机：</h2><h3 id="Fabric（python2-7）自动化部署工具"><a href="#Fabric（python2-7）自动化部署工具" class="headerlink" title="Fabric（python2.7）自动化部署工具"></a>Fabric（python2.7）自动化部署工具</h3><p>若使用windows，则安装Fabric3（python3)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install fabric3</span><br></pre></td></tr></table></figure>

<p>fabfile.py: 放在awesome-python-webapp，与www同级</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Deployment toolkit in windows envirement.</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> os, re, tarfile</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> *</span><br><span class="line">env.user = <span class="string">'root'</span></span><br><span class="line">env.sudo_user = <span class="string">'root'</span></span><br><span class="line"><span class="comment"># env.hosts = ['123.123.123.123']</span></span><br><span class="line">env.host_string = <span class="string">'47.106.33.242'</span> <span class="comment"># 改成你的服务器ip</span></span><br><span class="line">db_user = <span class="string">'Blog'</span></span><br><span class="line">db_password = <span class="string">'1234567'</span></span><br><span class="line">_TAR_FILE = <span class="string">'dist-awesome.tar.gz'</span></span><br><span class="line">_REMOTE_TMP_TAR = <span class="string">'/tmp/%s'</span> % _TAR_FILE</span><br><span class="line">_REMOTE_BASE_DIR = <span class="string">'/srv/awesome'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_current_path</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> os.path.abspath(<span class="string">'.'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_now</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> datetime.now().strftime(<span class="string">'%y-%m-%d_%H.%M.%S'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># includes = ['static', 'templates', 'transwarp', 'favicon.ico', '*.py']</span></span><br><span class="line">    <span class="comment"># excludes = ['test', '.*', '*.pyc', '*.pyo']</span></span><br><span class="line">    local(<span class="string">'del dist\\%s'</span> % _TAR_FILE)                   <span class="comment"># 删除旧压缩包</span></span><br><span class="line">    tar = tarfile.open(<span class="string">"dist/%s"</span> % _TAR_FILE,<span class="string">"w:gz"</span>)    <span class="comment"># 创建新压缩包</span></span><br><span class="line">    <span class="keyword">for</span> root,_dir,files <span class="keyword">in</span> os.walk(<span class="string">"www/"</span>):             <span class="comment"># 打包www文件夹</span></span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> ((<span class="string">'.pyc'</span> <span class="keyword">in</span> f) <span class="keyword">or</span> (<span class="string">'.pyo'</span> <span class="keyword">in</span> f)):    <span class="comment"># 排除开发过程调试产生的文件，为了简单点实现，此处没有完全照搬廖老师的参数</span></span><br><span class="line">                fullpath = os.path.join(root,f)</span><br><span class="line">                tar.add(fullpath)</span><br><span class="line">    tar.close()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deploy</span><span class="params">()</span>:</span></span><br><span class="line">    newdir = <span class="string">'www-%s'</span> % _now()</span><br><span class="line">    run(<span class="string">'rm -rf %s'</span> % _REMOTE_TMP_TAR)</span><br><span class="line">    put(<span class="string">'dist/%s'</span> % _TAR_FILE, _REMOTE_TMP_TAR)</span><br><span class="line">    <span class="keyword">with</span> cd(_REMOTE_BASE_DIR):</span><br><span class="line">        sudo(<span class="string">'mkdir %s'</span> % newdir)</span><br><span class="line">    <span class="keyword">with</span> cd(<span class="string">'%s/%s'</span> % (_REMOTE_BASE_DIR, newdir)):</span><br><span class="line">        sudo(<span class="string">'tar -xzvf %s'</span> % _REMOTE_TMP_TAR) <span class="comment"># 解压</span></span><br><span class="line">        sudo(<span class="string">'mv www/* .'</span>)          <span class="comment"># 解压后多一层www文件夹，因此向上移动一层</span></span><br><span class="line">        sudo(<span class="string">'rm -rf www'</span>)          <span class="comment"># 删除空文件夹www</span></span><br><span class="line">        sudo(<span class="string">'dos2unix app.py'</span>)     <span class="comment"># 解决windows和linux行尾换行不同问题</span></span><br><span class="line">        sudo(<span class="string">'chmod a+x app.py'</span>)    <span class="comment"># 使app.py可直接执行</span></span><br><span class="line">    <span class="keyword">with</span> cd(_REMOTE_BASE_DIR):</span><br><span class="line">        sudo(<span class="string">'rm -rf www'</span>)               <span class="comment"># 删除旧软链接</span></span><br><span class="line">        sudo(<span class="string">'ln -s %s www'</span> % newdir)   <span class="comment"># 创建新链接</span></span><br><span class="line">        sudo(<span class="string">'chown root:root www'</span>) <span class="comment"># user改为你的linux服务器上的用户名</span></span><br><span class="line">        sudo(<span class="string">'chown -R root:root %s'</span> % newdir) <span class="comment"># 同上</span></span><br><span class="line">    <span class="keyword">with</span> settings(warn_only=<span class="literal">True</span>):</span><br><span class="line">        sudo(<span class="string">'supervisorctl stop awesome'</span>) <span class="comment"># supervisor重启app</span></span><br><span class="line">        sudo(<span class="string">'supervisorctl start awesome'</span>)</span><br><span class="line">        sudo(<span class="string">'/etc/init.d/nginx reload'</span>) <span class="comment"># nginx重启</span></span><br><span class="line">RE_FILES = re.compile(<span class="string">'\r?\n'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rollback</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    rollback to previous version</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">with</span> cd(_REMOTE_BASE_DIR):</span><br><span class="line">        r = run(<span class="string">'ls -p -1'</span>)</span><br><span class="line">        files = [s[:<span class="number">-1</span>] <span class="keyword">for</span> s <span class="keyword">in</span> RE_FILES.split(r) <span class="keyword">if</span> s.startswith(<span class="string">'www-'</span>) <span class="keyword">and</span> s.endswith(<span class="string">'/'</span>)]</span><br><span class="line">        files.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">        r = run(<span class="string">'ls -l www'</span>)</span><br><span class="line">        ss = r.split(<span class="string">' -&gt; '</span>)</span><br><span class="line">        <span class="keyword">if</span> len(ss) != <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'ERROR: \'www\' is not a symbol link.'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        current = ss[<span class="number">1</span>]</span><br><span class="line">        print(<span class="string">'Found current symbol link points to: %s\n'</span> % current)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            index = files.index(current)</span><br><span class="line">        <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'ERROR: symbol link is invalid.'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> len(files) == index + <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">'ERROR: already the oldest version.'</span>)</span><br><span class="line">        old = files[index + <span class="number">1</span>]</span><br><span class="line">        print(<span class="string">'=================================================='</span>)</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> f == current:</span><br><span class="line">                print(<span class="string">'      Current ---&gt; %s'</span> % current)</span><br><span class="line">            <span class="keyword">elif</span> f == old:</span><br><span class="line">                print(<span class="string">'  Rollback to ---&gt; %s'</span> % old)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'                   %s'</span> % f)</span><br><span class="line">        print(<span class="string">'=================================================='</span>)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        yn = input (<span class="string">'continue? y/N '</span>)</span><br><span class="line">        <span class="keyword">if</span> yn != <span class="string">'y'</span> <span class="keyword">and</span> yn != <span class="string">'Y'</span>:</span><br><span class="line">            print(<span class="string">'Rollback cancelled.'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        print(<span class="string">'Start rollback...'</span>)</span><br><span class="line">        sudo(<span class="string">'rm -rf www'</span>)</span><br><span class="line">        sudo(<span class="string">'ln -s %s www'</span> % old)</span><br><span class="line">        sudo(<span class="string">'chown www-data:www-data www'</span>)</span><br><span class="line">        <span class="keyword">with</span> settings(warn_only=<span class="literal">True</span>):</span><br><span class="line">            sudo(<span class="string">'supervisorctl stop awesome'</span>)</span><br><span class="line">            sudo(<span class="string">'supervisorctl start awesome'</span>)</span><br><span class="line">            sudo(<span class="string">'/etc/init.d/nginx reload'</span>)</span><br><span class="line">        print(<span class="string">'ROLLBACKED OK.'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backup</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Dump entire database on server and backup to local.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    dt = _now()</span><br><span class="line">    f = <span class="string">'backup-awesome-%s.sql'</span> % dt</span><br><span class="line">    <span class="keyword">with</span> cd(<span class="string">'/tmp'</span>):</span><br><span class="line">        run(<span class="string">'mysqldump --user=%s --password=%s --skip-opt --add-drop-table --default-character-set=utf8 --quick awesome &gt; %s'</span> % (db_user, db_password, f))</span><br><span class="line">        run(<span class="string">'tar -czvf %s.tar.gz %s'</span> % (f, f))</span><br><span class="line">        get(<span class="string">'%s.tar.gz'</span> % f, <span class="string">'%s/backup/'</span> % _current_path())</span><br><span class="line">        run(<span class="string">'rm -rf %s'</span> % f)</span><br><span class="line">        run(<span class="string">'rm -rf %s.tar.gz'</span> % f)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restore2local</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Restore db to local</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    backup_dir = os.path.join(_current_path(), <span class="string">'backup'</span>)</span><br><span class="line">    fs = os.listdir(backup_dir)</span><br><span class="line">    files = [f <span class="keyword">for</span> f <span class="keyword">in</span> fs <span class="keyword">if</span> f.startswith(<span class="string">'backup-'</span>) <span class="keyword">and</span> f.endswith(<span class="string">'.sql.tar.gz'</span>)] <span class="comment"># 获取备份文件列表</span></span><br><span class="line">    files.sort(reverse = <span class="literal">True</span>) <span class="comment"># 最近的文件排在前面</span></span><br><span class="line">    <span class="keyword">if</span> len(files)==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'No backup files found.'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    print(<span class="string">'Found %s backup files:'</span> % len(files))</span><br><span class="line">    print(<span class="string">'=================================================='</span>)</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">        print(<span class="string">'%s: %s'</span> % (n, f))</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    print(<span class="string">'=================================================='</span>)</span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        num = int(input (<span class="string">'Restore file: '</span>)) <span class="comment"># 选择恢复哪个备份</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        print(<span class="string">'Invalid file number.'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    restore_file = files[num]</span><br><span class="line">    yn = input(<span class="string">'Restore file %s: %s? y/N '</span> % (num, restore_file)) <span class="comment"># 确定开始恢复</span></span><br><span class="line">    <span class="keyword">if</span> yn != <span class="string">'y'</span> <span class="keyword">and</span> yn != <span class="string">'Y'</span>:</span><br><span class="line">        print(<span class="string">'Restore cancelled.'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    print(<span class="string">'Start restore to local database...'</span>)</span><br><span class="line">    p = input(<span class="string">'Input mysql root password: '</span>)</span><br><span class="line">    sqls = [</span><br><span class="line">        <span class="string">'drop database if exists awesome;'</span>,</span><br><span class="line">        <span class="string">'create database awesome;'</span>, </span><br><span class="line">        <span class="string">'alter database awesome default character set utf8 collate utf8_general_ci;'</span> <span class="comment"># 修改为utf8字符集</span></span><br><span class="line">        <span class="string">'grant select, insert, update, delete on awesome.* to \'%s\'@\'localhost\' identified by \'%s\';'</span> % (db_user, db_password)</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> sql <span class="keyword">in</span> sqls:</span><br><span class="line">        local(<span class="string">r'mysql -uroot -p%s -e "%s"'</span> % (p, sql))  <span class="comment"># 删除旧数据库，新建数据库，授权给用户</span></span><br><span class="line">    extract(<span class="string">'backup\\%s'</span> % restore_file, <span class="string">'backup\\'</span>)    <span class="comment"># 解压</span></span><br><span class="line">    <span class="keyword">with</span> lcd(<span class="string">'backup'</span>):</span><br><span class="line">        <span class="comment"># linux系统和windows系统之间数据库导入导出，可能因为字符集不同出现'unknown command \\'错误</span></span><br><span class="line">        <span class="comment"># 通过在创建数据库后修改为utf8字符集，以及导入时指定--default-character-set=utf8，解决这个问题</span></span><br><span class="line">        local(<span class="string">r'mysql -uroot -p%s --default-character-set=utf8 awesome &lt; %s'</span> % (p, restore_file[:<span class="number">-7</span>])) <span class="comment"># 导入数据库</span></span><br><span class="line">        local(<span class="string">'del %s'</span> % restore_file[:<span class="number">-7</span>]) <span class="comment"># 删除解压出的文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract</span><span class="params">(tar_path, target_path)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    解压tar.gz文件到目标目录</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tar = tarfile.open(tar_path, <span class="string">"r:gz"</span>)</span><br><span class="line">        file_names = tar.getnames()</span><br><span class="line">        <span class="keyword">for</span> file_name <span class="keyword">in</span> file_names:</span><br><span class="line">            tar.extract(file_name, target_path)</span><br><span class="line">        tar.close()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> e</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    build()</span><br><span class="line">    deploy()</span><br><span class="line">    <span class="comment"># rollback()</span></span><br><span class="line">    <span class="comment"># backup()</span></span><br><span class="line">    <span class="comment"># restore2local()</span></span><br><span class="line">    input()</span><br></pre></td></tr></table></figure>
<p>直接运行fabfile.py即可连接linux服务器；</p>
<h3 id="如果使用Linux："><a href="#如果使用Linux：" class="headerlink" title="如果使用Linux："></a>如果使用Linux：</h3><p>提交修改:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fab build</span><br></pre></td></tr></table></figure>
<p>实行应用:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fab deploy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Linux</tag>
        <tag>Python</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo一些功能的实现</title>
    <url>/2019/11/03/hexo-blog/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要是列举了解决这两个比较难搞的功能。</p>
<h2 id="网易云音乐："><a href="#网易云音乐：" class="headerlink" title="网易云音乐："></a>网易云音乐：</h2><h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install aplayer --save</span><br></pre></td></tr></table></figure>

<h3 id="实现播放列表"><a href="#实现播放列表" class="headerlink" title="实现播放列表"></a>实现播放列表</h3><p>将E:\hexo\node_modules\aplayer内的dist文件夹复制到E:\hexo\themes\next\source内<br>并在该文件夹内新建music.js</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ap = <span class="keyword">new</span> APlayer(&#123;</span><br><span class="line">    container: <span class="built_in">document</span>.getElementById(<span class="string">'aplayer'</span>),</span><br><span class="line">    autoplay: <span class="literal">true</span>,</span><br><span class="line">    theme: <span class="string">'#FADFA3'</span>,</span><br><span class="line">    listFolded: <span class="literal">false</span>,</span><br><span class="line">    listMaxHeight: <span class="string">'300px'</span>,</span><br><span class="line">    mutex: <span class="literal">true</span>,</span><br><span class="line">    loop: <span class="string">'all'</span>,</span><br><span class="line">    order: <span class="string">'random'</span>,</span><br><span class="line">    preload: <span class="string">'auto'</span>,</span><br><span class="line">    volume: <span class="number">0.7</span>,</span><br><span class="line">    lrcType: <span class="number">1</span>,</span><br><span class="line">    audio: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'夜空中最亮的星'</span>,</span><br><span class="line">            artist: <span class="string">'逃跑计划'</span>,</span><br><span class="line">            url: <span class="string">'http://music.163.com/song/media/outer/url?id=25706282.mp3'</span>,</span><br><span class="line">            cover: <span class="string">'http://p1.music.126.net/d541jx7SqoDzVkenhmtg6g==/19193074974743620.jpg'</span>,</span><br><span class="line">            lrc: <span class="string">''</span>,</span><br><span class="line">            theme: <span class="string">'#ebd0c2'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'出卖'</span>,</span><br><span class="line">            artist: <span class="string">'简弘亦'</span>,</span><br><span class="line">            url: <span class="string">'http://music.163.com/song/media/outer/url?id=406086090.mp3'</span>,</span><br><span class="line">            cover: <span class="string">'http://p1.music.126.net/FiZafE2FWKsw3kEcJCsHSw==/1380986606501842.jp'</span>,</span><br><span class="line">            lrc: <span class="string">''</span>,</span><br><span class="line">            theme: <span class="string">'#46718b'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'温柔'</span>,</span><br><span class="line">            artist: <span class="string">'五月天'</span>,</span><br><span class="line">            url: <span class="string">'http://music.163.com/song/media/outer/url?id=386001.mp3'</span>,</span><br><span class="line">            cover: <span class="string">'http://p2.music.126.net/_B1Fn_Z1WxHzqGLzLZDf-w==/109951163263882447.jpg'</span>,</span><br><span class="line">            lrc: <span class="string">''</span>,</span><br><span class="line">            theme: <span class="string">'#FF9933'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'再见再见'</span>,</span><br><span class="line">            artist: <span class="string">'逃跑计划'</span>,</span><br><span class="line">            url: <span class="string">'http://music.163.com/song/media/outer/url?id=25706285.mp3'</span>,</span><br><span class="line">            cover: <span class="string">'http://p1.music.126.net/d541jx7SqoDzVkenhmtg6g==/19193074974743620.jpg'</span>,</span><br><span class="line">            lrc: <span class="string">''</span>,</span><br><span class="line">            theme: <span class="string">'#336666'</span></span><br><span class="line">        &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">            name: <span class="string">'Promise'</span>,</span><br><span class="line">            artist: <span class="string">'山岡晃'</span>,</span><br><span class="line">            url: <span class="string">'http://music.163.com/song/media/outer/url?id=18861490.mp3'</span>,</span><br><span class="line">            cover: <span class="string">'http://p1.music.126.net/QbadLxlMMmb4iStV4JnKLA==/6664139976590904.jpg'</span>,</span><br><span class="line">            theme: <span class="string">'#663300'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="添加到侧边栏"><a href="#添加到侧边栏" class="headerlink" title="添加到侧边栏"></a>添加到侧边栏</h3><p>sidebar.swing内添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"/dist/APlayer.min.css"</span>&gt;</span><br><span class="line">      &lt;div id=<span class="string">"aplayer"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      &lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/dist/APlayer.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">      &lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/dist/music.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="添加到其它位置"><a href="#添加到其它位置" class="headerlink" title="添加到其它位置"></a>添加到其它位置</h3><p>上面这段引用也可以添加到文章中实现播放器。</p>
<h3 id="网易云MP3链接获取"><a href="#网易云MP3链接获取" class="headerlink" title="网易云MP3链接获取"></a>网易云MP3链接获取</h3><p><a href="http://music.163.com/song/media/outer/url?id=.mp3&#39;" target="_blank" rel="noopener">http://music.163.com/song/media/outer/url?id=.mp3&#39;</a><br>添加上对应歌曲的id即可。</p>
<h3 id="网易云lrc歌词链接获取"><a href="#网易云lrc歌词链接获取" class="headerlink" title="网易云lrc歌词链接获取"></a>网易云lrc歌词链接获取</h3><p><a href="http://music.163.com/api/song/media?id=" target="_blank" rel="noopener">http://music.163.com/api/song/media?id=</a><br>添加上对应歌曲id即可。然后复制lyric的值，不用去除\n。</p>
<h2 id="Valine样式修改"><a href="#Valine样式修改" class="headerlink" title="Valine样式修改"></a>Valine样式修改</h2><h3 id="修改评论数量的样式："><a href="#修改评论数量的样式：" class="headerlink" title="修改评论数量的样式："></a>修改评论数量的样式：</h3><p><img src="/2019/11/03/hexo-blog/valine.png" alt="valine"></p>
<p>目的：改成中文，“评论数量”</p>
<p>一开始在Next主题目录下的layout_macro\post.swing寻找该样式发现<br><img src="/2019/11/03/hexo-blog/1.png" alt="1"></p>
<p>图片中除了想找的都在这个post.swing文件实现了，就是没有这个valine！<br>本地没有，网页部署后就有这个样式？<br><img src="/2019/11/03/hexo-blog/2.png" alt="2"></p>
<p>一番苦苦寻找后，发现它是用js动态生成的，位于next\scripts\filters\comment\valine.js文件夹内：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">     injects.postMeta.raw(<span class="string">'valine'</span>, <span class="string">`</span></span><br><span class="line"><span class="string">       &#123;% if post.comments and (is_post() or theme.valine.comment_count) %&#125;</span></span><br><span class="line"><span class="string">       &lt;span class="post-meta-item"&gt;</span></span><br><span class="line"><span class="string">         <span class="subst">$&#123;iconText(<span class="string">'comment-o'</span>, <span class="string">'valine'</span>)&#125;</span></span></span><br><span class="line"><span class="string">         &lt;a title="valine" href="&#123;&#123; url_for(post.path) &#125;&#125;#comments" itemprop="discussionUrl"&gt;</span></span><br><span class="line"><span class="string">           &lt;span class="post-comments-count valine-comment-count" data-xid="&#123;&#123; url_for(post.path) &#125;&#125;" itemprop="commentCount"&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">         &lt;/a&gt;</span></span><br><span class="line"><span class="string">       &lt;/span&gt;</span></span><br><span class="line"><span class="string">       &#123;% endif %&#125;</span></span><br><span class="line"><span class="string">      `</span>, &#123;&#125;, &#123;&#125;, theme.valine.post_meta_order);</span><br></pre></td></tr></table></figure>

<p>再到同一文件夹下的common.js文件查看这个iconText方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">     iconText(icon, key, defaultValue) &#123;</span><br><span class="line">             <span class="keyword">if</span> (!defaultValue) &#123;</span><br><span class="line">                 defaultValue = capitalize(key);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">           &lt;span class="post-meta-item-icon"&gt;</span></span><br><span class="line"><span class="string">             &lt;i class="fa fa-<span class="subst">$&#123;icon&#125;</span>"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="string">           &lt;/span&gt;</span></span><br><span class="line"><span class="string">           &#123;%- set post_meta_comment = __('post.comments.<span class="subst">$&#123;key&#125;</span>') %&#125;</span></span><br><span class="line"><span class="string">          &#123;%- if post_meta_comment == 'post.comments.<span class="subst">$&#123;key&#125;</span>' %&#125;</span></span><br><span class="line"><span class="string">            &#123;%- set post_meta_comment = '<span class="subst">$&#123;defaultValue&#125;</span>' %&#125;</span></span><br><span class="line"><span class="string">          &#123;%- endif %&#125;</span></span><br><span class="line"><span class="string">          &lt;span class="post-meta-item-text"&gt;&#123;&#123; post_meta_comment + __('symbol.colon') &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">        `</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>原来只要修改key这个值即可实现！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$&#123;iconText(<span class="string">'comment-o'</span>, <span class="string">'评论数量'</span>)&#125;</span><br></pre></td></tr></table></figure>
<p>完成。</p>
<h3 id="网站无效果"><a href="#网站无效果" class="headerlink" title="网站无效果"></a>网站无效果</h3><p>一套hexo clean+hexo g+hexo d下来，github page并没有实现更新一部分功能，可以把public文件夹删除，再次执行上述步骤！</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Github+Hexo的Blog</title>
    <url>/2019/11/03/my-first-blog/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>网上搜索就有一大堆的教程可以参考，一步一步实现即可。</p><h2 id="初步搭建教程："><a href="#初步搭建教程：" class="headerlink" title="初步搭建教程："></a>初步搭建教程：</h2><p><a href="http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa" target="_blank" rel="noopener">http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa</a></p>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
